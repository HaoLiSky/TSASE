
import numpy
import ase

def length_angle_to_box(boxlengths, angles):
    box = numpy.zeros( (3,3) )
    angles *= numpy.pi/180.0
    box[0][0] = 1.0
    box[1][0] = numpy.cos(angles[0])
    box[1][1] = numpy.sin(angles[0])
    box[2][0] = numpy.cos(angles[1])
    box[2][1] = (numpy.cos(angles[2]) - box[1][0] * box[2][0])/box[1][1]
    box[2][2] = numpy.sqrt(1.0 - box[2][0]**2 - box[2][1]**2)
    box[0,:]*=boxlengths[0]
    box[1,:]*=boxlengths[1]
    box[2,:]*=boxlengths[2]
    return box

def box_to_length_angle(box):
    lengths = numpy.zeros(3)
    lengths[0] = numpy.linalg.norm(box[0,:])
    lengths[1] = numpy.linalg.norm(box[1,:])
    lengths[2] = numpy.linalg.norm(box[2,:])
    angles = numpy.zeros(3)
    angles[0] = numpy.arccos(numpy.dot(box[0,:]/lengths[0],box[1,:]/lengths[1]))
    angles[1] = numpy.arccos(numpy.dot(box[0,:]/lengths[0],box[2,:]/lengths[2]))
    angles[2] = numpy.arccos(numpy.dot(box[1,:]/lengths[1],box[2,:]/lengths[2]))
    angles *= 180.0/numpy.pi
    return lengths, angles
    
def read_con(filename):
    con = open(filename, 'r')
    trajectory = []
    while True:
        try:
            con.readline() 
            con.readline()
            # Box lengths.
            tmp = numpy.array(con.readline().split())
            for i in range(len(tmp)):
                dim = i + 1
                try: 
                    float(tmp[i])
                except:
                    dim = i
                    break
            boxlengths = numpy.zeros(dim)
            for i in range(dim):
                boxlengths[i] = float(tmp[i])
            boxangles = numpy.array([ float(f) for f in con.readline().split()[0:dim] ])
            boxtemp = numpy.zeros((dim, dim))
            boxtemp = length_angle_to_box(boxlengths, boxangles)
            con.readline()
            con.readline()
            num_types = int(con.readline().split()[0])
            num_each_type = con.readline().split()
            mass_of_type = con.readline().split()
            num_atoms = 0
            for i in range(num_types):
                num_each_type[i] = int(num_each_type[i])
                mass_of_type[i] = float(mass_of_type[i])
                num_atoms += num_each_type[i]
            a = ase.Atoms()
            a.cell = boxtemp
            a.set_pbc((True, True, True))
            constrained = []
            cindex = 0
            for i in range(num_types):
                name = con.readline().strip()
                con.readline()
                for j in range(num_each_type[i]):
                    vals = con.readline().split()
                    x = float(vals[0])
                    y = float(vals[1])
                    z = float(vals[2])
                    mass = mass_of_type[i]
                    symbol = name
                    a.append(ase.Atom(symbol, (x, y, z), mass = mass))
                    if vals[dim] != "0":
                        constrained.append(cindex)
                    cindex += 1
            a.set_constraint(ase.constraints.FixAtoms(constrained))
        except:
            if len(trajectory) == 1:
                return trajectory[0]
            return trajectory
        trajectory.append(a)        

def write_con(filename, p, w = 'w'):
    con = open(filename, w)
    print >> con, "Generated by tsase"
    print >> con
    lengths, angles = box_to_length_angle(p.cell)
    print >> con, " ".join(['%12.6f' % s for s in lengths])
    print >> con, " ".join(['%12.6f' % s for s in angles])
    print >> con
    print >> con
    atom_count = {}
    name_order = []
    for i in range(len(p)):
        name = p[i].symbol
        if name not in name_order:
            name_order.append(name)
        if name in atom_count:
            atom_count[name] += 1
        else:
            atom_count[name] = 1
    print >> con, len(name_order)
    print >> con, " ".join([str(atom_count[i]) for i in name_order])
    printmasses = []
    index = 0
    for i in range(len(name_order)):
        printmasses.append(p[index].mass)
        index += atom_count[name_order[i]]
    print >> con, " ".join(["%12.6f"% i for i in printmasses])
    index = 0
    for i in range(len(name_order)):
        print >> con, name_order[i]
        print >> con, "Coordinates of Component", i+1
        for j in range(atom_count[name_order[i]]):
            free = 0
            if len(p.constraints) > 0:
                if index in p.constraints[0].index:
                    free = 1
            con.write("%12.6f %12.6f %12.6f %d %d\n" % (p[index].position[0],
                      p[index].position[1], p[index].position[2], free, index))
            index += 1

