
.. _optimizer:

Local Optimizers
================

TSASE holds the following local optimization routines:

Local Optimization
------------------

   The local optimization algorithms available in TSASE are: SDLBFGS and MDmin

   All local optimization classes have the following structure: 
	
   .. code-block:: none
	
	class Optimizer:
		def __init__(self, atoms, restart=None, logfile=None):
		def run(self, fmax=0.05, emax= 0.001, steps=1000000,optimizer='L2',maximize=False):
		def get_number_of_steps():
    
   The structure of the local optimization classes is very similar to ASE implementation 
   with a few additional features. Below describes the additional options in TSASE implementation:
 
   	**optimizer** : In ASEs implementation the convergence criteria is only the maximum per atom force
			In TSASE implementation there are additional options:
				
				**'L2'** : L2-norm for the entire force vector
				
				**'maxatom'** : maximum per atom force
				
				**'energy'** :  value of potential energy 
				
				**'bgsd'** : a special case convergence criteria for the bgsd saddle search;
					     a trajectory is converged when the L2 norm of the force or the 
					     potential energy is below a specified value 
	
	**fmax** : specified force convergence criteria
	
	**emax** : specified energy convergence criteria 
	 
	

Steepest Descent Limited memory BFGS
------------------------------------

    A limited memory version of the bfgs algorithm. Unlike the bfgs algorithm
    used in bfgs.py, the inverse of Hessian matrix is updated.  The inverse
    Hessian is represented only as a diagonal matrix to save memor.y

    This version of LBFGS is based off of ASE implementation with a few improvements. 
    The initial guess for the inverse Hessian is updated at every step by estimating the 
    curvature along the previous step direction.  If a negative curvature is calculated or 
    if the angle between the force and the LBFGS direction is greater than 90, then the 
    memory is reset.

    Below is an example script of how to use this optimizer: 
 
    .. code-block:: none
	
	al = tsase.calculators.al()
	p = tsase.io.read_con('al.con')
	p.set_calculator(al)
	min = tsase.optimize.SDLBFGS(p, maxstep=0.1, memory=100)
	min.run() 

MDMin
-----
    
    ASE implementation of MDMin `(See ASE for details) <https://wiki.fysik.dtu.dk/ase/ase/optimize.html>`_ with the additional option to have a maxmimum step distance. 

    Below is and example of how to use this optimizer

    .. code-block:: none
	
	min = tsase.optimize.MDMin(p,dt=0.1,maxstep=1.0)
	min.run() 

- **MushyBox**

   Relaxes a variable number of degrees of freedom which may include full cell relaxation

Global Optimizers
==================

TSASE contains a software package which combines features from multiple global optimization (GO) methods.  In this software package, you can select a move type (dynamics versus random), an acceptance criteria, and whether to utilize history.  

Below outlines the features of this combined GO software:

    class ``tsase.optimizer.`` **BasinHopping** (self, atoms, temperature=100, optimizer=SDLBFGS, fmax=0.05, dr=0.4, 
    adjust_cm=True, mss=0.1, minenergy=None, distribution='uniform', adjust_step_size=None, adjust_every =10, target_ratio = 0.5, 
    adjust_fraction = 0.05, significant_structure = True,  pushapart = 0.4, jumpmax=10, jmp = 7,
    molecular_dynamics = False, dimer_a = 0.001, dimer_d = 0.01, dimer_steps = 20, timestep = 0.1, mdmin = 2,
    history_weight = 0.0, adjust_temp = True, minimaHopping_acceptance = False, minimaHopping_history = True,
    beta1 = 1.04, beta2 = 1.04, beta3 = 1.0 / 1.04, Ediff0 = 0.5, alpha1 = 0.98, alpha2 = 1. / 0.98)

    **atoms** : atoms object defining the PES

    **temperature** : temperature in Kelvin

    **optimizer** : local optimizer

    **fmax** : magnitude of the L2 norm used as the convergence criteria for local optimization

    **dr** : maximum displacement in each degree of freedom for Monte Carlo trial moves

    **adjust_cm** : fix the center of mass

    **mss** : maximum stepsize for the local optimization
    
    **minenergy** : the BH algorithm stops when a configuration if found with a lower potential energy than this value 

    **distribution** : the distribution used for the displacement of each atom

        default: uniform

        options: 'gaussian': the parameter dr serves as the standard deviation of the gaussian distribution

                 'uniform': a uniform random number is selected in the interval [-dr,dr]

                 'linear': a uniform random number is selected in the interval [-dr*d,dr*d] where d is the distance from the geometric center of a cluster

                 'quadratic': a uniform random number is selected in the interval [-dr*d*d,dr*d*d] where d is the distance from the geometric center of a cluster
    
    **adjust_step_size**: adjust the step size after this many Monte Carlo steps so that a target_ratio of steps are accepted.

        default is 'None' and step size will not be adjusted. Any positive integer will turn on this feature

    **target_ratio**: specified ratio of accepted steps. Default: 0.5

    **adjust_fraction**: the fraction by which to change the step size in order to meet the target acceptance ratio

        default: 0.05

    **significant_structure** : displace from the optimized structures after each acceptance

    **pushapart** : push atoms apart until all atoms are no closer than this distance

    **jumpmax** : after this number of consecutive rejected jumps, accept the following move.  This allows for a more global search of the potential energy surface.

    **jmp** : number of consecutive accepted moves when occassionally jumping. 

    **molecular_dynamics** : set to True when your trial move is molecular_dynamics

    **dimer_a** : dimer ajustment parameter; scalar for forces in optimization

    **dimer_d** : dimer adjustment parameter; distance between two images in the dimer

    **dimer_steps** : dimer adjustment parameter; number of dimer iterations

    **timestep** : timestep in fs

    **mdmin** : number of times pass minima to stop MD simulation

    **history_weight** : 

    **adjust_temp** :

    **minimaHopping_acceptance** :

    **minimaHopping_history** :

    **beta1** : 1.04, temperature adjustment parameter

    **beta2** : 1.04, temperature adjustment parameter

    **beta3** : 1./1.04, temperature adjustment parameter

    **Ediff0** : 0.5 eV, initial energy acceptance threshold

    **alpha1** : 0.98, energy threshold adjustment parameter

    **alpha2** : 1./0.98, energy threshold adjustment parameter




TSASE holds the following global optimization routines:

Basin Hopping
-------------
    Below outlines the features of the basin hoppping implementation. All flags are equivalent to the description above except for those defined below 

    class ``tsase.optimizer.`` **BasinHopping** (self, atoms, temperature=100 * kB, optimizer=SDLBFGS, fmax=0.1,dr=0.1, active_ratio=1.0, adjust_cm=True, mss=0.2, minenergy=None, distribution='uniform', significant_structure = False, pushapart = 0.4,jumpmax=15,adjust_step_size=None, target_ratio = 0.5, adjust_fraction = 0.05)


    **temperature** : temperature in kT


Minima Hopping
--------------
    Below outlines the features of the minima hoppping implementation.

    class ``tsase.optimizer.`` **MinimaHopping** (self, atoms, T0, beta1, beta2, beta3, Ediff0, alpha1, alpha2, mdmin, logfile, minima_threshold, timestep, optimizer, minima_traj, fmax, dimer_a, dimer_d, dimer_steps)
    
    Below is an example script of how to use this optimizer:

    .. code-block:: none
	
	from tsase.optimize.minimahopping import MinimaHopping
 
        lj = tsase.calculators.lj(cutoff=35.0)
        system = tsase.io.read_con('lj38-cluster.con')
        system.set_calculator(lj)
	opt = MinimaHopping(atoms=system)
	opt(totalsteps=10000, maxtemp=200000, minEnergy=-173.918427)

.. rubric:: References
.. [#Wales97_5111] D. J. Wales, J. P. K. Doye, "Global Optimization by Basin-Hopping and the Lowest Energy Structures of Lennard-Jones Clusters Containing up to 110 Atoms", *J. Phys. Chem.* **101**,5111-5116 (1997).
.. [#Goedecker04_9911] S. Goedecker, "Minima hopping: An efficient search method for the global minimum of the potential energy surface of complex molecular systems", *J. Chem. Phys.* **120**, 9911 (2004).
.. [#Shonborn09_144108] S. Shonborn, S. Goedecker, S. Roy, and A. Oganov, "The performance of minima hopping and evolutionary algorithms for cluster structure prediction", *J. Chem. Phys.* **130**, 144108 (2009). 
