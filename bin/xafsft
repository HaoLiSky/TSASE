#!/usr/bin/env python
import numpy as np

def hanning_window(k, kmin, kmax, dk):
    condlist = []
    condlist.append((kmin-dk/2.0 <= k) & (k <  kmin+dk/2.0))
    condlist.append((kmin+dk/2.0 <= k) & (k <= kmax-dk/2.0))
    condlist.append((kmax-dk/2.0 <= k) & (k <= kmax+dk/2.0))

    funclist = []
    funclist.append(lambda x: np.sin(np.pi*(x-kmin+dk/2.0)/(2.0*dk))**2.0)
    funclist.append(1.0)
    funclist.append(lambda x: np.cos(np.pi*(x-kmax+dk/2.0)/(2.0*dk))**2.0)

    return np.piecewise(k, condlist, funclist) 

def xafsft(r_min, r_max, xk, ccpath, kweight=0):
    ccpath *= xk**kweight
    delta_k = 0.05
    nfft = 2048
    cnorm = delta_k * 1.0/np.sqrt(np.pi) 
    chi_r = np.fft.fft(cnorm*ccpath, n=nfft)

    delta_r = np.pi/(nfft*delta_k)                                              
    r = np.array([ i*delta_r for i in xrange(len(chi_r)) ])
    ir_min = np.argmin(np.abs(r_min-r))
    ir_max = np.argmin(np.abs(r_max-r))

    return r[ir_min:ir_max], chi_r[ir_min:ir_max]

def write_chir(filename, r, chir):                                                                       
    f = open(filename, 'w') 
    for i in xrange(len(r)):
        f.write('%e %e\n' % (r[i], np.abs(chir[i])))
    f.close()

def read_chi(filename):
    f = open(filename)
    ks = []
    chis = []
    for line in f:
        if line.startswith('#'):
            continue
        fields = [ float(field) for field in line.split() ]
        k = fields[0]                                                           
        chi = fields[1]
        ks.append(k)
        chis.append(chi)
    f.close()
    ks = np.array(ks)
    chis = np.array(chis)
    return ks, chis

def main():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('--kmin', type=float, default=2.0)
    parser.add_argument('--kmax', type=float, default=18.0)
    parser.add_argument('--kweight', type=int, default=0)
    parser.add_argument('--dk', type=float, default=1.0)
    parser.add_argument('--rmin', type=float, default=0.0)
    parser.add_argument('--rmax', type=float, default=8.0)

    parser.add_argument('--output', '-o', type=str, default='exafs.chir')

    parser.add_argument('chi', metavar='exafs.chi')

    args = parser.parse_args()

    k, chi = read_chi(args.chi) 

    window = hanning_window(k, args.kmin, args.kmax, args.dk)
    chi *= window

    r, chi_r = xafsft(args.rmin, args.rmax, k, chi, args.kweight)

    write_chir(args.output, r, chi_r)

if __name__ == '__main__':
    main()
