from threading import Thread as _Thread
import numpy
import numpy as np
import ase
import tsase
import tsase.xyz.process
import argparse
import sys

from ase.structure import bulk as _bulk

sys.tsase_exit = sys.exit
sys.exit = ''

# Initialize the buffers
_buffers = {'default': _bulk("W", "bcc", cubic=True).repeat((2,2,2))}
_current_buffer = "default"

def _xyz_update_thread_function(_xyz):
    import time
    lastAtoms = None
    while True:
        atoms = _xyz.get()
        if atoms:
            _buffers[_current_buffer] = atoms
            lastAtoms = atoms.copy()
        needSend = False
        atoms = _buffers[_current_buffer]
        if atoms is None:
            pass
        elif lastAtoms is None and atoms is not None:
            needSend = True
        elif atoms.positions.shape != lastAtoms.positions.shape:
            needSend = True
        elif (atoms.positions != lastAtoms.positions).any():
            needSend = True
        elif (atoms.cell != lastAtoms.cell).any():
            needSend = True
        if needSend:
            _xyz.put(atoms)
            lastAtoms = atoms.copy()
        time.sleep(1.0/10.0)

def show():
    # Try to start the visualizer.
    try:
        _xyz = tsase.xyz.process.xyz_process()
        _xyz_update_thread = _Thread(target = _xyz_update_thread_function, args=(_xyz,))
        _xyz_update_thread.daemon = True
        _xyz_update_thread.start()
    except:
        print "Visualizer could not be initialized."

# Some functions to be used by the user.
def traj(target = None):
    if not target:
        return _buffers[_current_buffer]
    else:
        _buffers[_current_buffer] = target

show()

# Need a carriage return at the end for the line pushing to work.

