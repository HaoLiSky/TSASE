
import sys
import time
from threading import Thread

import ase
import tsase
import tsase.xyz.process
import numpy

import argparse
import sys

sys.tsase_exit = sys.exit
sys.exit = None

traj = None
_tsase_ca = "traj"

def _set_ca(atoms):
    globals()[_tsase_ca] = atoms
    
def _get_ca():
    return globals()[_tsase_ca]
    
class _tsase_viewer:
    def __init__(self, atoms_name):
        self.viewer_atoms = atoms_name
        self.xyz = tsase.xyz.process.xyz_process(atoms_name)
        xyz_update_thread = Thread(target = self.xyz_update_thread_function)
        xyz_update_thread.daemon = True
        xyz_update_thread.start()
    def xyz_update_thread_function(self):
        lastAtoms = None
        while True:
            atoms = self.xyz.get()
            if atoms:
                globals()[self.viewer_atoms] = atoms
                lastAtoms = atoms.copy()
            needSend = False
            atoms = globals()[self.viewer_atoms]
            if atoms is None:
                pass
            elif lastAtoms is None and atoms is not None:
                needSend = True
            elif atoms.positions.shape != lastAtoms.positions.shape:
                needSend = True
            elif (atoms.positions != lastAtoms.positions).any():
                needSend = True
            elif (atoms.cell != lastAtoms.cell).any():
                needSend = True
            if needSend:
                self.xyz.put(atoms)
                lastAtoms = atoms.copy()
            time.sleep(1.0/10.0)







